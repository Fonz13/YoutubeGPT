hello friends today we are gonna create
this beautiful chat application using
react and firebase
we will be able to create a new user
or login
after that we will see this chat page
there are the latest conversations here
we can click on them to see messages
or search for any user to start a new
conversation
i can send a text i can send an image
and all these operations are real time
let's log into the second user's chat
and see how fast it is
and also if someone else writes anything
to us we are gonna see it here
immediately with the latest message
it's a perfect project to learn react
and the latest version of google
firebase
and finally we are gonna deploy this
application using a hosting service to
do that we'll be using hostinger it's my
favorite hosting provider and the
sponsor of this video i've been using
their services for two years and never
had a single issue i've deployed all my
websites on their servers and they are
really fast you can use just one hosting
for many websites and also you are gonna
get a free domain and free ssl
certificate at this price it's amazing
and if you have some large applications
that require more memory and more space
you can prefer a vps server
after selecting the best option for you
choose your time period here and if you
use the link in the description below or
lamadev coupon code here you are gonna
get an extra discount
after choosing the payment methods and
purchasing you are gonna redirect it to
hostinger panel
so let's claim our free domain and set
up our hosting
i'm gonna write a domain name
after the registration it's ready to use
so let's set up the hosting
build a website
i'll start from scratch
and choose my new domain
and we can finish this setup
it's gonna take a while and right after
that you are gonna see your h panel
it's really user friendly you can manage
your domains your folders and files
and this file manager is my favorite
you are gonna see how easy to deploy any
website in a minute
so if you are ready let's create our app
and deploy it here using this manager
okay if you created a new folder let's
get started firstly we are going to
install a react app to do that of course
you can use mpx create react app but if
you do that there will be many
unnecessary files here you are going to
waste your time deleting all those
folders and files instead you can use my
github repository
youtube2022 and here as you can see
there is a branch which is react mini we
are going to install this branch to do
that i'm going to come here and copy
this link
and i will say
git clone we are going to install only
one branch so i will say single branch
and it's gonna be react mini
and i'm gonna paste my link and finally
i will say dot that because i want to
install everything in this folder
i will enter
and as you can see they are here but we
don't have our node modules to install
our libraries i will just say yarn or if
you are using npm you can say npm
install
it's gonna take a while but before let's
see what we are gonna create
as you can see when we visit our
application we are gonna see this login
page
and also there is a register page and if
there is a user we are gonna see the
home page but before let's create this
register and login page as you can see
it's ready
and if you check inside as you can see
it's really clean there is nothing
unnecessary it's perfect for beginning
i will say yarn start
and this is our application let's create
here
pages
and inside we are gonna have
login
page register page
and home page
let's close this and create register
page
i'm gonna call this component here
okay it's here perfect let's see what we
are gonna have firstly we are gonna have
a container here we are gonna give this
background color and after that we are
gonna create this dropper we will give
some padding it's gonna be white
backgrounds and other elements inside
let's do that
let me close this sidebar and terminal
okay let's come here i will say class
name is gonna be form container
actually let's use it like that and
inside one more div
and it's gonna be form wrapper
and inside this we are going to create
our form
let's check
it's going to include of course it's a
register page
it's going to include four inputs three
of them are text inputs and this one is
file input when we click this as you can
see it's opening folders
let's do that
input text input email input password
and input file let's give some
placeholder
it's gonna be display name
email
and password
and there is a logo here and a title
small title i forgot them before this
form i'm gonna add them so i will say
spam
let's say llama chat
and one more and it's gonna be register
and let's say title for example and
after this input
i'm gonna create a button
and it's going to say sign up
and finally there is a text here let's
say
p tag and this text
of course we are going to use link here
but we are not going to use anchor tag
after when we install react rather than
we are gonna see this link here let's
check our app
okay they are here by the way there is
no button
i didn't save
okay it's here and it's here let's give
background color for the container and
and center this wrapper to do that you
can use css but i want to use sas here
our application is not that big i think
we can write everything inside one css
file and using sas is the better option
here i think i'll say yarn add or npm
install
sass
let's create our file here
i will say
style.scss
and we are going to use this fire
everywhere so i can import this here
style.scss
okay
what was our cast name container
firstly let's give our background color
it's gonna be this blue color
like that
i want to make this a hundred percent
i'll say h 103h
so it's going to be full screen and to
center them i'm going to use flexbox i
will say display flex
align item center
is gonna center vertically and
just fly content center is gonna center
horizontally okay perfect i can do the
same thing for this form but this time
i'm gonna use flex direction column that
because they are going to be vertical
let's say wrapper first
and this is the best feature of sas you
can write your children inside your
parents and it prevents a lot of
conflict i highly recommend you to use
it and
what i was saying okay form
i will say display flex again but the
extraction will be called
let's give some space between them
i will say gap 15 pixels like that
let's give background color for this
wrapper and some padding inside
i will say background color it's going
to be white
and padding will be 20 from top and
bottom 60 from left and right
like that i can give some border radius
here and again for the xbox and give
some space between them firstly i will
say border radius is going to be 10
pixels
display flags flag extraction column
and gap will be 10 pixels
like that perfect but let's center them
align item center
okay awesome what about this logo and
this title i will say logo
color will be this dark blue
font fade will be bold and font size
will be a little bit bigger like that
and for this one
i'm gonna give exactly the same color
but font size will be smaller
okay let's give some padding inside
those inputs
inside form this is our parent
i'll say input padding 15 pixels like
that but i want to delete this border
instead i'm just gonna give bottom
border
it's gonna be none but border bottom
it's gonna be the main background color
let's close them again
actually i can separate them and you can
see better
okay and
i didn't give here size one pixel solid
and this color
like that if you want to you can give
here any beat
like that those placeholder texts are
really dark i didn't like them let's
change it
i'll say placeholder
color will be rgb
and a little bit softer like that and
what about this button again i will
delete border and change the background
color it's inside our form
let's check okay it's ending here so i
can write like that
i'll say background color
and text color will be right i will give
some padding inside and front fit will
be bolt
like that i forgot relating border and
cursor pointer
okay awesome for this p tag this is the
form it's outside the form so i'm gonna
write it here
it's gonna be
blue color
font size will be small and i'm gonna
give margin between this text and this
button let's say time pixels
okay perfect but as you realize in the
real app we are using this image and
this text
instead of this ugly button what i'm
gonna do is to hide this input and
create a label which represents this
file input
what i mean by that
let's come here i will say label
as you can see it says html4 basically
we can create here any id let's say file
or whatever you say and if i say file
here same id whatever i write here any
text any image doesn't matter it's gonna
represent this file input let's test i'm
gonna click and as you can see it opens
my folder
so if i come here and say
inner style
and display none
as you can see it's not here anymore but
i can use this as a file input
of course you can give here any class
name and write it here but i just want
to show you how you can use inner style
okay so instead of this text i will say
image
we are gonna use this image and this
text
let's create here image folder
and i'm gonna push here all my images
we are gonna use this one
okay this one
let's import this
import
add
from
images and add
avatar.png let's use it here
span
add and avatar
like that
but i want to center them to do that i'm
gonna give here display flex and align
item center
let's come back
after this button i'm gonna say
label
display flex align item center
like that
and i will give some space here and
change this font size and color so let's
see gap 10 pixels
color will be light color font size will
be smaller
like that
and that's a cursor pointer
that we can click okay perfect what
about this image it's too big
it's inside label i'm gonna say
with 32 pixels
like that what about this login page
let's check here
as you can see it uses exactly the same
template so it's going to be much easier
let me shrink this i will copy
everything here and paste inside login
of course i'm gonna change here
my component name will be login and we
are gonna need only email and password
so i'm gonna do it here
and it's gonna be signing
and
you don't have an account
so register
i'm gonna come here and call my
component to see
like that
as you can see perfect that's all so
what about the home page let me close
this one
and close everything here
i'm gonna open home page
of course to see changes i'm gonna call
it here
of course we don't have any function yet
okay it's here
let me log in here
what was the email i forgot
okay this one as you can see we have
many components here our sidebar
this chat panel inside this chat panel
we are gonna have our messages this
input so basically writing all those
components inside inside only this
component is not a good idea it's better
to separate them into small components
so i will come here and say
components
firstly we are gonna have this sidebar
this chat
let's create
inside this sidebar we are going to have
this nerve bar this search bar and those
chats
let's see
never
search
and chats
and what about here we are going to have
individual messages and this input panel
of course you can separate more
components but it's enough i think it's
not a big application we don't need to
worry about performance that much of
course we should but
it's just couple components we are just
gonna refresh those chats
and those messages that's all okay let's
get started firstly inside home page i'm
gonna create this container let's come
back
let's say
class name
home
and here i will say container
and inside we are gonna have this
sidebar and this chat panel of course we
didn't create functions for them let's
do that quickly
okay
that's a sidebar
and chat components
let's see
okay as you can see they are here let's
give some style for this component i'm
going to open again
style file
and
create here home page
again background color exactly the same
color
it will be 100 vh
i'm gonna do exactly the same thing here
like that
and after i will create container inside
this home
we are not going to have any border or
background but for now to just see
better i will give border
one pixel solute and let's say white and
let's give some border radius
10 pixels
and right now i will give some width and
height you can arrange this for yourself
it really doesn't matter i just gave 65
percent
and height 80 percent
you can make it full screen or smaller
or bigger whatever you want and right
now i want to separate this sidebar and
chat they are going to be horizontal but
sidebar will be smaller chat space will
be bigger
like that as you can see this is one
unit this is two units we can do this
using flexbox easily
let's say
display flex
as you can see they are horizontal let's
go to sidebar
i'll say class name it's gonna be
sidebar
and for this chat
and i'm gonna say
sidebar
and chat
as i said it's gonna be one unit so i
can use flex here
and it's gonna be
two
as you can see it's twice bigger than
sidebar perfect let's give a border here
and you can see better
i will say border but it's going to be
only border right
one pixel solid and
this dark color
like that actually i can give background
color here
it's going to be exactly the same color
so we can delete this border
okay perfect but as you realize
this corner is still sharp that because
it's overflowing
if you remember our container has a
border radius
to prevent this overflow i will say
overflow heater
like that okay
before this chat
let's take care of this sidebar i'm
gonna open up navbar
let's call it here first
okay it's not coming let's import
okay it's here let's open up
and let's see what we are gonna have
firstly we are gonna have our logo and
after that we are gonna have a div here
which includes this author username and
logout button let's say class name
number
let's say span logo
it's gonna be your application name
after that let's create userdiv
and it's gonna include image span
let's say john and a button
going to be block out
like that
let's make them horizontal i'm going to
go to style
inside sidebar we have a navbar host
it's a container and it's going to be
display flags align item center
let's make this background color darker
and you can see better
background color
like that
and i want to give a height here
it's going to be 50 pixels
okay
and some padding because it's really
close here
and i want to separate this
logo and this div
so i will say justify content space
between
as you can see it separated them by the
way let's change
color
actually i regret that i didn't create
color variables
but
okay it can stay we don't have that much
component and if i update this
repository or if someone send them to me
i can update them and it will be better
but anyway as i said it's not a huge
design
for this logo it's gonna be bold
i'll say logo
like that
and
music
again display flex and i'm gonna give
some gap between them
like that and for this image we don't
have yet but
let's give background color for now it
can be this light color and i will say
i24 with 24
and border radius will be 50
like that
and of course
to crop this image properly i'm going to
say object fit
and color
okay what about this button
after image
again background color
color will be this light color font size
will be really small i want to delete
all those borders
like that
and
it's going to be clickable
so it's going to be cursor pointer
okay perfect
let's find here quickly an image
let's use this woman here
now bar
in which
okay perfect
so what about this part
as you remember there is a search bar
here
let's create
i'm gonna close this number and inside
sidebar
i will say
search components
okay it's not coming again
something is wrong
i'll say search
and it's here so what we are gonna have
here let's check
as you can see there's an input and when
we search for something we are gonna
show this user something like that i'm
gonna open
search let's give class name
firstly we are gonna have search form
and inside we are gonna have our input
and after this form i'm gonna create a
div
it's gonna be
user chat let's say image i'm gonna
paste exactly the same image
and user chat
info
and one more span and it's gonna be
display name let's say j okay it's
really huge
let's take care about this
inside now bar
i will say search
folder but it's gonna be only border
bottom
one pixel solid and gray and inside we
have
search form
inside we have an input
and i will not write this
user chat here that because it's common
instead i'm gonna come here and write it
here
outside of search but it's still inside
sidebar let's take care about this image
first
and we can see better after that i will
say 50
height 50
for the radius
okay it's still the same
oh i'm writing inside number of course
it should be sidebar
so i'm gonna move them
like that
okay perfect as you can see this image
is pretty weird
let's give object fit
like that okay awesome let's give some
padding for this search form
and inside this input i'm gonna say
background color
transparent
as you can see like that
let's delete this border here
and color will be white
so when we write something we are going
to see it like that but i want to get
rid of this outline
like that
and
let's give here placeholder
i will say placeholder
find a user
and i want to change this color also
placeholder
color will be light gray
okay it's much better i think so what
about this user chat let's keep heading
again display flags align item center
i'm gonna give a gap between them
like that
color will be white
and cursor will be pointer
like that and when i hover over this
user chat i'm gonna change the
background color so let's say
our
background color will be
our dark color
let's check
okay perfect and in our application as
you can see we have many users here
let's create them i'm going to open up
sidebar again
and
chats component
let's create here
i'm not writing those users here
directly that because whenever we
refresh these
users that's because when we add here
some message or when we receive any
message this list will be refreshed so i
don't want to re-render this search
component and never component that's why
we are using different components
so i'm gonna open up
chat component and let's give class name
and i'm gonna
copy here
and paste inside
but there's a difference here that
because when we search for any user
there will be no message here
but in our conversations
we are gonna have latest message
so i'm gonna add one more thing and it's
gonna be let's say
p tag
hello let's open up style again
and let's change this by the way this is
gonna be bold
i forgot that so what was the parent
user chat info
after this image i will say span
and p tag
this is gonna be username
font size a little bit bigger
and front width will be
bolder and for this one font size will
be 14 and color will be light gray
like that let's create some more
users here
it's just the design of course we are
gonna delete them later
okay
okay this is capital this is capital
it's not that much important but anyway
okay perfect so what about this chat
component
again we are gonna have this topper of
course we don't have any video calling
feature or friendship feature but it
looks nice
and maybe in the future we are gonna
create so let's come here i'm gonna
close everything
and open up chat
and style
let's create here chat info
it's gonna be top bar
i'm gonna create here span it's gonna be
user name
and we are gonna have some icons let's
say chat icons
and inside we are gonna have three
images
i will import them quickly
first one will be
camera second one will be add friend
icon and
more icon
like that okay let's give some style
chat is here and i will say chat info
again height will be
50 pixels let's give background color
display will be flex
a line item center like that and again
i'm going to separate them jane will be
here and d will be here
so i'm gonna say justify content
space between
like that
of course i can give some padding
and text color will be light gray
and what about those icons
chat icons
display flags i'm going to give some gap
and for each icon i'm gonna limit their
heights it's gonna be 24 pixels
and cursor pointer
like that okay so far so good so what
about messages we have a topper here and
input component
and when we refresh our messages
we don't want to re-render those
components so let's create messages
component
messages
class name
i will say messages
and it's going to include couple of
message
if you remember
we have a component here we are going to
call it here couple times
let's import
okay
i want to call it here
oops
sorry i forgot here our folder
and it's gonna be inside chat not chat
info
okay perfect and finally
we are gonna have here input component
like that let's change this background
color
here is the chat
it's gonna be here
messages
and background color will be our light
color and again let's keep padding
okay we are gonna take care of those
messages but before
i want to show you how we can arrange
this message's height to do that firstly
i want to create this input
let's open up input
and give a class name
okay it can stay like that and here i
will just say input
height will be 50 pixels and background
color will be white
okay it can stay like that we are gonna
handle this later but before
let's calculate these messages height as
you can see this is 50 pixels
but if you remember it has 10 pixels
padding time for on top down from bottom
it means this top bar is 70 pixels
it's gonna be exactly the same thing for
this input it's going to have padding 10
pixels also
so height 50 pixels 10 pixels paid in
here 10 pixels speeding here it's 70
pixels
so if i come here and say height
calculate
100 percent minus 160 pixels
that's because we have 20 pixels padding
here
also
it's gonna give this full screen of
course there are other ways to do that
but i just want to show you how you can
use calculate properly and i want you to
be careful about paddings and margins
you have to calculate them
okay let's take care of this input it's
easier i think
as you can see we have an input here two
icons and one button but again it's
going to open up our folder so basically
we are gonna do exactly the same thing
here i'm gonna go to input
input text
placeholder type something
and i'm gonna create a div here it's
gonna be send and it's gonna include our
icons and send button
i'll say image
it's gonna be our first image
and i'm gonna create here
an input
and it's going to be file i will say
style
display no
and remember we are giving an id here
to use it inside label
html4 file and inside another image
and finally we are gonna have a button
and it's gonna say send let's import
those images
and use them here
and this one will be
this one
like that okay
let's make them horizontal and center
all those items
i'm gonna come here and say display
flags align item center and justify
content will be spaced between
like that let's delete this border and
outline
i will say input remember this is our
class name
here
and this is the html element
i'm not writing dot here let's make this
a hundred percent
so we can click it everywhere inside
this long area
and i will say border none
outline known
and i'm gonna change to font color
and font size will be bigger
like that
let's change this color also
i'm going to say placeholder
color will be light gray
okay what about this div
if you remember we have a incentive here
we can use it
after these inputs i'm going to say
set class
again it's going to be
centered and i will give some
space between them
like that and for those images let's
reduce their sizes i will say
24 pixels and cursor pointer
like that and for this button
there will be no border i'm going to
give some padding
it's going to be 10 from top and bottom
15 from left and right
color will be white that because we are
going to change background color
and it's going to be
let's say this color
okay awesome so let's take care of those
messages
i'm going to open up message component
and i will say
message but there is something important
here that because as you can see there
are two types of messages first one will
be this white one and second one is this
blue one so basically i'm gonna need
here a condition but i'm gonna make this
later
that's because we don't have any user we
don't have any data so inside this
message we are gonna have message info
which includes this avatar and this date
and secondly will be message content and
it's going to include this text
and if there is an image we are going to
show it inside this div
so i will say
message info
message content
inside this info we are going to have an
image
let's use the same image
and i will say span just now
and here
we are gonna have a p tag i will say
hello and if there is an image we are
gonna show it here again i'm gonna paste
this image okay let's take care of them
inside messages
i will say message
it's gonna be display flags and gap
between user information and message
content
and first one will be
user information which is message info
and second form will be
content
and inside we have an image
i want to quickly change those image
sizes that because as you can see they
are really big let's say 40 pixels
and object fit
and for other image
it will be 50
so it's not gonna be full screen like
that okay of course it's a really big
image
what i want to do is to delete this
image for now
to see our messages better after that we
can activate so what about this message
info as you can see they are horizontal
i want to change this
this is message info
i'm gonna go there and say display flags
flex direction
column and i want to change the color
it's gonna be gray
font way it will be
a little bit thinner
like that and there is no space between
them let's say margin bottom
like that and as you can see it's
overflowing here so what i want to do is
to go to parent here and
overflow
screw
so if doesn't fit inside this component
we will be able to scroll like that
okay so what about this content
i just want to give here a limit that
because we can write really long message
here so i will say
maximum with
is going to be let's say 80 percent
again display flags
flex direction column remember it
includes text and image i'm gonna give
space between them
and for the p tag which is our text
i'm gonna give background color it's
gonna be white
let's give some padding
and i want to change this border radius
this side will be really sharp but for
other ages i'm gonna give some radius to
do that i will say border radius top
left will be zero we are not going to
have any
but others will be 10 pixels
like that
but if i add here
one more class name let's say owner i
want to change their style
message here
inside this message i'm gonna say if
it's message but at the same time it's
owner
i'm gonna change to direction
to do that i'm gonna use display flex
but this time i'm gonna change only
direction
flex traction it's gonna be row again
it's gonna be horizontal but this time
it's gonna be reverse
like that for this text
we'll say p tag
background color will be let's say this
color and
text color will be white
like that
border radius and pixels
zero pixel 10 and 10.
like that
it looks pretty good but if we add our
images back
as you can see
we have a problem here to prevent this i
will go to p tag again
actually let's come here and i will say
maximum width
it's gonna be maximum content so it's
gonna be maximum the length of this text
not bigger and to move all those
elements here
i'm going to come here by the way of
course this p tag inside message content
and i will say line items
flex and
so it's gonna be end of the screen like
that
perfect
it looks pretty nice
so we finished our design
right now we are gonna need an
authentication first
by the way before starting i want to
show you how you can create responsive
styles of course this is not gonna be
fully responsive i just want to show you
how you can do this i'm gonna come here
and create a sas function
to do that we are gonna be using mixing
and for example for mobile devices
we are going to be using media query and
i'm going to write here my condition
and it's going to be
maximum width 480 pixels and inside we
are gonna write our contents
i can do the same thing for others for
example
for tablets
and for
laptops for example let's change here
like that
of course you can give more
and let me show you how you can do this
i will come here and say
include tablet
and inside i'm gonna write my style and
it's gonna be display no
let's see
i'm gonna open my console i will shrink
okay
ah this is form
of course it's gonna be
inside homepage our container navbar and
logo here
and right now as you can see there is no
logo anymore like that it's that easy
what else we can do here
for example we can move this logo to
here but before we can maybe make this
container larger
let's copy this
and if you remember we have a container
here and it was 65 percent but this time
let's say 90 percent
as you can see it looks much better what
about this logo button
here
i will just say position absolute
and i'm gonna give its position bottom
time pixels but if you do that as you
can see it appears here but it's
supposed to be here to prevent this
problem the parent should be position
relative what's our parent this sidebar
so i'm gonna go to sidebar
and i will say position relative
as you can see it's here and you can do
the same thing for mobile devices for
example you can only show those images
you can delete this text and its
username whatever you want i just want
to show you how you can do this
maybe one more thing i can show and it
says variables you can create your
variables basically like that
dollar sign and
for example dark color
and this color for example and i can use
this color wherever i want
like that
it's that easy
okay it's not that important i don't
want to waste time with this design
let's take care of authentication of
course to do that we should create a
firebase application to do that i'm
gonna go to firebase
get started
let's create a project this is our
previous project if you remember and i
will say just chat
i'm gonna create my project it's gonna
take a while and after that we are gonna
initialize our firebase application to
do that let's create here
firebase.js and also i'm going to open
my console and i'm going to install
firebase
i'm at
firebase
okay it's ready
right now let's create our web app it's
gonna be chat again or whatever you want
and as you can see npm installed
firebase we have already done that
and this is our configuration i'm gonna
copy here
and paste inside firebase let me close
this terminal and sidebar
okay i'm gonna clear here
okay as you can see it initialize our
app like that of course if you want to
you can store your api key or any other
ids inside an emv file but i'm not gonna
do that it can stay let's export this
app
and i'm gonna export one more thing and
it's gonna be both we are gonna call
get all function from firebase let's
import
it comes from firebase alt
and
get alt function
let's see actually how we can do this
i'm gonna go to documentation
and right here sign in
email password
okay here
as you can see we are gonna create a
user using an email and password to do
that we are gonna need this function we
have already created here we are gonna
call it and after that we are gonna use
this function and send our email and
password let's do that i'm gonna open
app chess and let's call register again
and open up register page so what you
can do here let's open up our app here
as you remember we have four inputs here
you can create use state for each of
them or there is one more option you can
create on submit event for this form and
you can reach every single input inside
what i mean by that
i'm going to come here and say on submit
and let's say handle submit
let's create this function
handle submit
and when we click on this button we
don't want to refresh this page
to prevent this i'm going to say event
prevent default
let's try to see what's inside this
input for example i'm gonna say
console.log event target but we have
four targets here
i'm gonna take only first one
first one and value i'm gonna open my
console
write here something
sign up and as you can see it's here it
means we can reach every input here
let's copy this and i'm gonna say const
display name
email password and file
of course it's gonna be
second item
third item and fourth item and it's
gonna be
files and we are gonna take the first
file it's gonna be a single image right
now we can use them
but if you remember it says we can use
only email and password
we cannot send our picture or display
name directly let's copy this
and paste here
i'm gonna import like that but we are
gonna take this function from our file
i will say
alt
and i can delete here
let's see
i will say user
gmail.com
some password here i will sign up and it
doesn't allow us that because we didn't
initialize our authentication let's come
here
and as you can see there are many
methods here we are going to use email
and password i'm gonna enable i will
save
and let's try again
of course we didn't write any console
log or something let's console.log this
user
if i click again it's going to be an
error that because we already have our
user i'm going to change here
and as you can see this is our user and
it has display name email there's a
phone number here photo url so basically
we can update them later let's see how
we can do this
actually i'm gonna delete everything
here
and i will say const
response
of course it's an async function so
let's write here
async
and we are going to wait our user here
of course we can write here try catch
block
if there is an error
we can console.log or we can basically
create here
error set error
view state at the beginning it can be
false
if there is an error we can make it true
and we can show it somewhere here let's
say if there is an error
right here s pen
something went wrong or of course you
can specify your error
and after that we can update our profile
picture
and display name to do that we should be
able to upload an image
let's come here and check for that i
will say upload image
and as you can see we can use cloud
storage to do that i'm gonna come here
build and i'm gonna open this storage
get started it can be test for now later
we are gonna change it
it's gonna be ready
but let's see how we can do this as you
can see we are gonna need this function
let's copy this
and paste inside our firebase file again
and i will say export
we are gonna use it and let's call this
function here
like that and after that as you can see
we need to create a reference
and we are going to pass in our storage
and a file name and after that we are
going to upload it like that
but there is a better example here let's
check for it
okay here as you can see after creating
our reference
we are gonna use this function we are
gonna send our reference and our file
and after that we will be able to see
the uploading percentage or any error
and at the end of the process we will be
able to see our url image url
let's copy this
and i'm gonna paste here
let's take this tool here
on top
of course we are gonna get our storage
from our firebase file let's say storage
in this case we don't need here
okay so as you can see we should name
our image in this storage what we can do
we can just use username for example
so i will say display name so if we
create a user name john it's going to be
john.png or whatever and after that
let's clear here as i said we can see
our percentage but we don't need that i
think i'm gonna delete we can make our
error handling let's say if there's an
error again set error is gonna be true
and finally if everything is okay
it's gonna return this downloadable url
okay right now we have a user here and
we are able to upload any image
and i'm gonna come here and update my
user i will say await update profile
and it comes from
firebase authentication
and if you are using firebase you should
get used to this because you are gonna
import a lot of function like that
by the way of course it should be async
function
and i'm gonna pass here my user is gonna
be response and user and what i'm gonna
update
if you remember
there is a display name here
and photo url
we can update them
i will say
display name is gonna be our display
name here
photo url will be this download url
let's say
photo url
download url
but it's not enough that because this
user belongs only authentication
database
as you can see they are here but how we
can reach other people it's not about
authentication anymore we should be able
to find our friends and chat with them
to do that after registering this user
i'm gonna save this user into another
database again this is only
authentication we can login we can
register we can update our user
but we cannot reach other people to do
that we are gonna use firebase database
let's create
again test mode
okay it's ready basically we are gonna
create users collection here
and we are gonna add our users
let's see how we can do this
set a document
a data to cloud firestore
as you can see we are gonna use this
function it comes from firebase
firestore
and after that we are gonna write here
our collection name and it's gonna be
users
and we are gonna write here any unique
id so which id we are gonna use
if you come here as you can see there is
a uid here we can use it let's do that
let's copy this
and paste here i know there are a lot of
functions but
there is nothing to do
and i will come here and say
wait
set document
document
and as you can see there is a db here
but we haven't created yet let's go to
firebase and i'm going to come here and
say export const
db
and get firestore
let's import
it comes from firebase firestore
like that okay we can use it here
i'll say db and our collection name is
going to be users
and unique id remember we have a user
response.user and we can use its uid and
after that we will write here what we
are going to store
as you can see it stores name state and
country we are gonna store our
display name
email
and photo url i'm not storing password
that because we are gonna use this users
collection to see other users
and it's going to be download url oops
of course it should be inside this
function like that and also we can write
here user id it's going to be much
easier to use it
like that then we've hatched this user
we are going to say only user dot uid
okay let's see again
i'm gonna refresh
let's say john
any password here i'm gonna choose an
image
let's choose this one and sign up
of course we cannot see anything but if
we check here i'm gonna refresh
and as you can see it's here perfect
and this is our image let's check
okay perfect
it works properly so what else we are
gonna need here
and we are gonna need chat collection
and also i want to create user chats
collection it's gonna include the all
conversations we have
it's gonna be easier that because
otherwise when we create here a chat
collection it's gonna include maybe
thousands of chats and we are gonna make
a query sending our username to search
for all chats belong us
instead of that we can basically create
users chat and its id can be our user id
and we can take the list of our
conversations using that collection it's
gonna be much easier so what i'm gonna
do here when we register any user we are
going to create its users chat document
here let's do this and you are going to
understand better i will say
more await
and set documents
and i will say
user chats
and again we are gonna pass here our
user id
and it's gonna be an empty object for
now
that's because we don't have any
conversation yet when we register we are
not going to have any friends here
but after when we search for anyone and
when we click on his user card here we
are going to add this user inside this
collection
and finally if everything is okay
we are gonna go to home page to do that
we will be using react router dom let's
open up our terminal and i will say
and add react rather though
let's see how we can use it
as you can see we should wrap our app
using this browser router and after that
we are gonna write each individual
router for example for home page for
login page for register page so i'm
gonna copy here and i'm gonna come here
and
let's delete this actually
and i'm gonna paste my router like that
and we are gonna wrap our app
like that and we can create our roots
and inside we are gonna write our roots
first one will be
our home page and whenever we visit our
home page
which is index page
we are gonna call the home component
and when we try to visit login url let's
say path login
we are gonna call login page
and for the register
let's try as you can see this is home
page i'm gonna go to
login
perfect and if i want to go to register
it's gonna be register component it's
that easy so let's write here
our navigation
to do that we are going to be using use
navigate hook
let's say const navigate
use navigate hoop
and it comes from reactgradual
okay
so we can use this function
and after successful operation
we can go to home page
like that
let's see
i will say user2
let's choose this image
sign up
and home page perfect
it works but there's a problem here if
we don't have any user we can still see
this home page to prevent this we should
check if we are logged in or not of
course you can do this inside this app
but we are going to need this user
everywhere for example
in this number when we send any message
in this chats component that because we
are gonna fetch this data using our user
id
basically creating here user and sending
this user everywhere is not a good idea
we don't want to make prop drilling
instead we are gonna use context api
let's come here and create
contacts folder
and it's gonna be
authentication context
now i will say export
const auth context
and
create context
it comes from react and after that we
are gonna create an authentication
provider and we are gonna create our
user there and we will be able to use
that user inside every component in our
app
let's do that if you are watching my
channel you already know how to use
context api i'm not gonna explain again
but in the future i want to create a
video and in that video we are gonna
deep dive into this context api let's
create our provider i will say exports
const alt context provider
and i'm gonna pass here children it
represents our components
and let's create our current user using
use state i will say const
current user
set current user
i will say use state
and at the beginning we are not going to
have any usage but if we are logged in
it means there is an authenticated user
so how we are gonna check it it's really
easy to do this using firebase i think
it's the strongest feature of firebase
you don't have to worry about your
authentication firebase is doing
everything for you you are gonna see
right now
i'm gonna create here a use effect
and i'm gonna check whether we have a
user or not
to do that we are going to use again a
firebase function on all state change
and we are going to pass in our off
function and after that we are going to
check whether there is a user or not and
if there is a user we are going to set
our current user
let's import this okay it's not coming
i'll say import this function
and it comes from firebase
authentication
let's see
okay
and finally i will say all context
and provider and we are gonna wrap our
children which is the component
and in this case these children will be
our application and we can send anything
here value and we are gonna send current
user
it means this component can reach this
current user so any component that we
wrap with this auth context provider
will be able to reach this current user
so basically we can wrap our entire
application or you can go to index file
here and you can wrap your app using
this provider i will say auth context
provider
and i'm gonna wrap it like that let's
test
i'm gonna come here and say
const
current user
use context hook
each context we are going to use we are
going to use
auth context
which we have created here
i'm going to save
let's console.log first
and as you can see it's here so even if
i refresh the page it's going to be
still here you don't have to worry about
cookies tokens local storages firebase
handles everything
okay but there is something important
remember my use effect video
if you are listening in a real time
operation you should use a cleanup
function
otherwise it's gonna cause some memory
leaking
if you didn't watch that video i highly
recommend to watch it it contains
everything you need to know about use
effect so i will say closed ansep
and we are going to call it here
by the way
there is a white screen here
now okay i didn't return here
okay perfect so how we can log out there
is a button here let's do this quickly
it's really easy i'm going to open up
nabar and i'm going to create here on
click event
and i'm just going to call firebase sign
out
function and of course it comes from
firebase authentication let's say import
sign out
from
like that and here i'm gonna pass my
firebase authentication like that and
let's see okay this user is here i'm
gonna log out and perfect we don't have
any user right now
so how we can prevent seeing this page
i'm going to go to app.js again i can
write here a condition i can say if
there is a current user
show home page
if there is no show login page but there
is a better option it's more
professional
basically i'm gonna create here a
protected route and we are gonna check
if there is a user or not if there is
not it's gonna navigate to
login page if there is we are gonna show
any component in this case it's gonna be
homepage let's say const protected root
again we are gonna take any children
i will say if there is a current user
sorry if there is no current user just
navigate to login page i will say return
and we are going to use we are crowded
on navigate component
and it's gonna redirect us to login page
like that
let's import this
like that and i'm gonna wrap my home
component with this protected root
like that as you can see
even if we try to go to home page it's
going to login page what about this
login operation let's make this quick
also i'm gonna go to login page i'm
gonna do a similar thing
they are gonna have error navigation
handle submit actually i'm gonna copy
everything here
and paste and let's delete here
and of course we are gonna have only
email and password
so it's gonna be zero is gonna be
one we are not gonna have any file
and that's right here our event
on submit
is gonna be handle submit
okay let's import those react hooks like
that
and we are going to be using firebase
signing with email and password let's
see
sign in email password
we already created our user
and as you can see we are going to use
this function
let's copy this
and paste here of course we are going to
use our own authentication function
and after that
we are going to assign it
like that
i will say
await let's import this
and that's all
and if everything is okay
navigate to
login page
i'm gonna refresh and let's try
actually i forgot my password
it was one two six i think let's try
okay there is something wrong let's
write our error actually
i forgot that
i'm gonna copy here
and paste
okay
so i'm going to create another user by
the way i cannot click here again we are
going to be using react router dom and
we are going to import link
let's come here
and i will say link
and
to register
so i can do the same thing
for register page
like that okay perfect
i'm gonna say jane
jane
gmail.com
one two six
let's choose this woman
and sign up
okay
there is a user
but we cannot see our home page
ah if there is a user we are gonna
return our home page of course let's say
children
okay awesome i will log out as you can
see we cannot see our homepage anymore
i will say jane of course it's an email
sign in
and it's still here
okay we have a user
oh of course home page not login
okay perfect
of course my password is really weak
don't worry about that okay awesome
right now we have a user let's change
this image and this name i'm going to
open member
and i'm going to call here our current
user i will say const
current user
use context
and authentication context
let's use it
it's gonna be current user dot auto url
and it's gonna be
current user display name
and perfect it's here
as you can see it's really easy
and if we check our db let's find our
user here
okay this one
this is our user id
and if we check here
you are gonna see that there is same id
here and it's an empty document right
now that because we don't have any
friend so let's take care of finding a
user i'm gonna open up
let's close everything actually
and i'm gonna open up search
so what we are gonna do when we search
for any name here any display name and
when we enter we are gonna see the
result here let's do that so let's
create here
username for the input
set user name
use statehook
and one more and it's gonna be
the actual user
we don't have any user yet let's say
null and we can create maybe error
like that so when we write anything
inside this input we are going to change
this username let's take this
and i will say on change methods
set username event target and value
and when we enter we are going to search
for a user and if there is a user we are
going to set this state to do that i'm
gonna come here and say one more event
and it's gonna be
on key down
and let's say handle key basically it
listens our keyboard actions and when we
press on enter we are going to search
for user let's create this
function first
handle key
if e code
equals enter
just search for user we can create here
a search function let's say
handle search
and we can call it here like that so how
we can search any user to do that we are
going to use firebase query
let's check
as you can see we are going to need some
more functions
and after that we are going to say find
the collection
named steez in our case it's going to be
users and create a query and here we are
going to write our condition we are
gonna say if display name equals
username
find the user
so let's
copy this and import them
paste and i will say import
db from firebase
like that so i will say cost
query
collection
we are gonna pass inside our db
and which collection we are going to
reach is going to be users and i will
say where display name
equals
this username
okay and after that using this query
we are gonna search for our users like
that as you can see we are gonna use get
documents and we are gonna use our query
and here
is gonna return our user here and here
we can set our user so let's copy this
and i will paste
of course it's gonna be an async
function
and get documents from
firestore
and if there is a user we are going to
set our user
documents dot data of course we can
write it inside try catch block
and if there is an error
we can set our error
or
just true
let's use this user here delete this and
it's going to be
user dot url
and its name
of course if we don't have any user we
are not going to return this div
i will say if there is user
and here if there is an error we can say
user not found or something went wrong
okay let's try i'll say john
as you can see it's here perfect
and after finding we should be able to
choose this user so when we click on
this user we are going to add this user
inside user chats and also we are going
to create here chats collection
and it's going to include all chat
messages between two people so let's
create here and one click event i will
say one click
and handle select
so let me click on this user div we are
gonna call this function
firstly let's see what we are gonna do
as i said there will be
chats collection here
and it's gonna include the chat between
two people so how it's gonna know that
this is the chat between john and jane
basically we can take jane's user id and
jones user id we can join them together
and write it here as a document id and
after that it's gonna include
messages array
and it's gonna include message details
so
first
check
whether the group
exists or not
i mean this group is
chats collection in firestore
and if it doesn't exist just create new
one
and again if it doesn't exist we should
create user chats for each user we are
gonna add conversation with john inside
this user chat
i know it sounds complicated but when we
create and when we see it on our
application you are gonna understand
better so i will say
create
user
chats four gene and four draw let's do
that it's gonna be an
async function
and i will say
const response
and await get document we are gonna call
our db and we are gonna look inside
chat's collection and we are gonna write
here the id of those users we are gonna
join them and write it here
let's do this
i'm gonna write here
combined id
and we are gonna write here a logic
i will say if current users id by the
way we should take this current user
using auth context so i will say const
current user
use context hook
and
alt context
context and our context here
so we can use this user id
i will say
current user dot uid if it's bigger than
user dot uid we are gonna write here
current user dot uid plus user dot uid
if user id is bigger than our current
user's id it's gonna be do opposite
user dot uid plus current user id
like that
and i'm gonna search for this id here
let's say try catch
okay and i'm gonna write here a
condition i will say if response doesn't
exist it means if there is no chat
between john and jane inside this chats
collection we are gonna create new one
so i will say if response exists it's a
firebase method by the way if it doesn't
exist
i will say create chat
remember how we are doing this i will
say await
set document
like that and we are gonna send our db
here and inside chats collection we are
gonna create a document and its id will
be combined id by the way i shall drop
this
and after that it's gonna be empty we
are not gonna have any message actually
we can say messages
and it's gonna be an empty array okay
and after that we are gonna create user
chats
but here there is something we need to
know as you remember we are creating
user chat when we register this is our
user id and we don't have any
conversation yet here is empty but when
we search for john and when we click on
his user card we are gonna add it here
but not only the user
there will be also this latest message
here
so basically we have user chats
and inside we have jane's id
and inside
we are gonna have the conversation
between john and jane so it's gonna be
our combined id
and inside this we are gonna need a
couple of things
we are gonna need user information which
includes this image display name and
maybe its id
and we are gonna need last message and
also i'm gonna add a date that because
we are gonna sort this chats list so
it's gonna be
something like that user info
is gonna include john's display name
jones image his id
and we are gonna have last message of
course we are not gonna have any last
message for now and date and it's gonna
be current date so our structure is
something like that
but how we are gonna update our user
chat here
let's come here and search for update
documents
it's here i think
okay it's a set function
okay update
as you can see we are gonna use update
talk function
and inside we are gonna write our
reference
and finally we are updating it like that
but as you realize we are gonna have
some nested objects we are gonna have
combined id and inside we are gonna have
user info
so for those nested objects
as you can see it's here
only thing we should do is using dot
so it's going to be combined id dot user
info combined id to update or whatever
we are going to use like that
let's do that
i'm going to delete here
and i will say await
update document doc
and db
by the way there is no comma here like
that
and it's going to be user chats and we
are going to look for our users chat
and insight
i will say
combined id
dot user info
this is how you can use a variable and a
string together and it's gonna be uid
user dot uid display name
user dot display name and
photo url
is gonna be user dot photo url and i'm
gonna add here date
again combined id and date and it's
gonna be the current date but we are not
gonna use date dot now instead we are
gonna use
firebase server timestamp we are using
this because it calculates different
time zones and something like that
so let's say
server timestamp
like that okay as you can see i'm not
writing combined id and last message
that because when we search for any user
we are not going to have any latest
message we are going to add it here
inside this input when we send we are
going to send our message to chats
collection and also we are going to send
it here inside user chats so i'm gonna
do the same thing for the other user so
it's gonna be
user uid again combined id and
other details but i'm gonna change here
it's gonna be current user
when we see them here you are gonna
understand better
let's see i hope everything is okay
i'm gonna search for john
i'm gonna click
okay something is wrong
okay i forgot here
talk
and this is not talks
get talk
i'm gonna click again
and let's check
okay as you can see this is jane's id we
added here
the combined id we have a date here we
have a user info object and later we are
gonna have here the latest message and
here as you can see this is combined id
and inside
messages it's empty for now so right now
we can fetch all user chat and we can
use this to fetch latest conversations
let's do that by the way when we click
on this user we can close this search
bar i mean this user
so i will come here and say
let's delete this
i'm going to say set user
it's going to be null ak and also i can
delete this input text so it's going to
be set user name
it's going to be an empty string key
let's try i will click ok user has gone
but it's still here that because we
didn't use this value here
it's going to be using me
as you can see it's gone perfect
right now let's delete those users
instead fetch them from our db
so let's open up chats
and here instead of those users we are
going to fetch our conversations
so i'm going to create here
chats
set chats
new
state
at the beginning is gonna be an empty
array
and we are gonna fetch using use effect
but we are not gonna fetch this data
only once it's gonna be real time we are
gonna actually listen this collection
so whenever something changes here we
are gonna see it here immediately
to do that we are to use firebase on
snapshot let's see actually i will say
real time cat
as you can see we are going to use this
method and it's going to return us to
real time data this is one of the best
features of firebase
let's copy this
under paste on snapshot
document
and our db
we are going to look inside user chats
and here is going to be current users id
let's fetch this
i will say const
current user use context
and alt context
and after that we can set our data i
will say set chats
it's going to be
documents
and data as you can see there is a
missing dependency here it's going to be
current user dot id
and as you realize
it gives us unsub here we should clean
up
so let's see what we have i will say
console.log
and chats
of course we are going to have an error
most probably that because at the
beginning we are not going to have user
id let's see
as you can see
it's empty to prevent this issue i'm
gonna wrap this with a function let's
say const get chats
like that
and i'm gonna write here a condition i
will say
if there is current user id
after call this function
like that as you can see this is here
and we are gonna use this user info here
but there is a problem here that because
this is an object not an array but don't
worry we are gonna convert this object
into an array
let's write here objects dot entries
and chats
and right now as you can see it's an
array and this is our chat
and inside as you can see there are two
elements
the first element is the chat id and the
second element is object so this is chat
id and this is our content so let's do
that
i'm gonna delete other users here i'm
just gonna leave one of them
and i will say object
dot entries i'm gonna pass here our
chats
and i will say map
for each chat we are gonna return this
user
of course if you are using a loop give
here a unique key and it's gonna be
chat and the first element remember
this is id and for other informations we
are gonna use chat one
that's right here
chat one
dot display name
and chat one
last message
or text of course we don't have yet but
we are gonna have
okay image is still the same let's
change it
chat one
and
photo url
user info of course
let's choose them
user info
okay perfect so what i'm gonna do
when we click on this user we are gonna
see the chat between us and this user
basically we are going to store this
user information somewhere
and we are going to use it here to do
that again we are going to use context
api
otherwise we have to come here
and create here users set user we have
to send it to sidebar and inside sidebar
we are gonna send it to our chat and we
are gonna use it inside this chat
component
to prevent this
again we are gonna use context
so i will say user context
or let's say chat context
and let's copy this
and paste here
i'm gonna change here
okay
but right now we are gonna do something
different we are gonna use use reducer
that because we are gonna need this user
information
and also the combined id to fetch this
chat
remember
in chats collection we are gonna search
for a specific chat to do that we are
gonna use this combined id
so we are gonna need a state like this
user and it's gonna include user
information and also chat id and since
this chat id depends on this user it's
better to use use reducer here if you
didn't watch my use reducer video i
recommend you to watch it first and
after you are gonna understand
everything better
so i'm gonna create here an initial
state i'll say const initial state
yeah i'm gonna have chat id
and we are gonna have a user
let's create our reducer i will say
const
chat reducer
we are gonna take a state and action
and we are gonna have only one action
here and it's gonna be change user when
we click on this user we are gonna
change this user at the same time we are
gonna update this chat id let's say
switch action type
i'm i'm writing switch because maybe we
can add something more here we can block
the user or something like that
so it can stay like that
i will say case
let's say change user
and we are going to return a different
state but there is a warning here that
because we don't have default
i will say default
oops it's going to be here
and
return state
okay what we are going to return here
firstly we are going to update our user
it's going to be action payload
and after that we are gonna update our
chat id
i'm gonna write exactly the same thing
here
let's copy this
and paste here
of course we don't have current user
let's import
use context
it's gonna be inside here that because
it's a component
and after that we are gonna update this
id of course it's gonna be action and
payload
and finally we are going to get our
state and dispatch and we are going to
send them here to use in any component
so i will say
state
dispatch
i will say use reducer
and chat reducer and our initial state
here
let's set this state
actually i will say data
equals state
and we are gonna send this dispatch
so we will be able to dispatch this
action and update our user and chat id
so we can search for index file
and
one more context here and it's going to
be
chat context provider
okay
let's use it here
i'm gonna create one more context and
it's gonna be
chat context and we are gonna fetch
dispatch
and when we click on any user here let's
say on click
and i'll select
const
and we'll select
and we are going to update our user to
do that we are going to use dispatch
and type will be
user change what was the name
change user
and payload will be
our user here of course we should send
it here we are going to send user
information remember
chat one dot user info
and it includes its id image and display
name of course
function like that and we are going to
take this user and pass it here
like that let's open up
chat component
and again
use this chat context
that because we are going to update this
name
and of course we are going to fetch
users
let's import them quickly
and it's going to be user dot display
name
okay it's not here
now okay we send as a data
it's gonna be data dot user
of course if there is a user display
name
i will click and as you can see it's
here perfect and what about these
messages let's open up messages
i'm gonna copy this
and paste here
and let's create use state
messages set messages
and this time
we are gonna fetch this data here
chats combined id and messages
i will say use effect
post
ends up
on snapchat
documents our db
chats and we are gonna pass here the
combined id remember it's inside data
chat id and after that we are gonna take
this document
and i'm gonna write here a condition i
will say
if document exists set our messages and
it's going to be
document.date oops
and of course we are going to clean up
and it's gonna be data
for chat id
so we can map to our messages right now
and this time it's an array remember
so we can directly use map
i will say messages.map
for each message
just return a message component and
message will be this message
and i can delete the rest
and i'm gonna open
message here and take the prop it's
gonna be message and let's see what we
have
console.log and message
i'm gonna open my console
i will click
okay something is wrong
messages is not a function let's comment
this out for now and check if we have
messages or not
okay
messages
yeah of course it's gonna be messages
we are fetching this document but we
didn't say messages
okay
i will open
okay i can click right now
and we are gonna show them here
by the way i'm gonna give here a unique
key and it's gonna be m.i.d
and here is going to be user id remember
but it depends on this message
if it belongs us we are going to show
here our image if it doesn't block us we
are going to show user image
so we are going to need our current user
here
use context
alt context and one more is gonna be
chat context
that's because we are gonna need other
user
and i will say data
and i will say if message sender id
belongs to us we are gonna show our
message actually let's close here for
now
and first let's type something and after
that it's gonna make sense how we are
gonna do this i'm gonna open
input
let's take them
and i'm gonna write here two use states
we can send a text and we can send an
image so i will say cons
text
set text
use state
and one more is gonna be image
and that's right here on click method
i will say handle send
firstly let's take our text here i will
say own change
set text event target and value and for
this file i will say on change
set file
and it's going to be event target
and files and the first one
it's not file it's image
okay right now we can send them firstly
i'm gonna check whether there's a file
or not
if there is no we are gonna send only
this text so i will say if there is a
file
upload and send
i said again file is going to be image
if there is no image
just send text and let's see how we can
update arrays
i'm going to come here and
update array
okay here
update elements in array
as you can see we are choosing our
document here
and after that our array in this case is
gonna be messages
and
we are using this method
array union
i will say async function
and i'm gonna say
await update document
db collection name is gonna be chats
and here we are gonna use combined id
which is data.chat id
and inside this we are going to use
messages
and array union
and we are going to pass here our
message firstly we should give here any
unique id
that because we are going to use it here
to do that we can use uuid library
i will say yarn add
uuid
let's import
we are going to use version 4 let's say
as uuid
let's use it here and after that we are
going to send our text we are gonna send
sender id
it's gonna be current user.qid
because we are sending and finally a
date
but we cannot use here server timestamp
instead we are gonna use
normal timestamp and we are gonna choose
the current date like that and what if
there is an image
remember how we are sending image let's
open up register
i'm gonna copy here
let's import them quickly
our storage and this name will be again
it can be uuid or the current date
whatever you want but it should be a
unique name
i'm gonna import this
and our image let's come back
i'm gonna copy this
and paste it
you can handle your error here
we are going to take this url and send
this message again but this time we are
going to send image also
i will paste
and this time it's going to be image
and this image will be
download url
let's try
i hope everything is okay i'm gonna
choose this and i will say hello
this is a test
i'm gonna send
okay there is something wrong
oops
it's going to be a function of course
and here
okay
and as you can see it's here perfect and
this is our id
i will choose this image and test2
and let's see
and as you can see it's here perfect it
works
right now we can take care about
our messages by the way after sending we
can delete our image and this text
it's going to be an empty string and
image will be no
but of course we should update this site
also which is user chats
in this case we are gonna add here the
latest message and we are gonna send our
text and its date and we should do this
both for jane and john
so i'm gonna come here and say
await update document
rdb here and user chats
currentuser.uid
and remember how we are updating nested
objects
i'm gonna say data dot chat id
because remember we are storing them
using this combined id
and
let's say last message
and inside this
we are going to send text
and also
we are going to update this date
this date
that because we are going to sort this
list
and i'm gonna say
data dot
chat id
dot date
and it's gonna be
server timestamp we can use it here but
we cannot use it in array union
comma here
okay
let's do the same thing for other user
data dot user dot user id
and
exactly the same thing
let's see i'm gonna refresh
i'm gonna choose john
test for
sidebar gonna send
okay
and this is here
perfect
but we cannot see it here
let's check
chats
okay not user info it's going to be just
last message
like that perfect by the way we can
delete this
input text
to do that we are gonna use
value here
and it's gonna be text
okay perfect
but how we are gonna sort those items
i'm going to create one more user
let's say adam
can be this guy
i'm gonna search for john
sorry we are jane we should test jane
i'm gonna click
and as you can see it's here perfect
hi jane
i'm adam
i will send
as you can see it's here but this is the
latest message it should be at the
beginning
and here
okay it looks correct but it's totally
random to prevent this
we can go to chats
and we can sort this chats array
to do that we are gonna use
sort methods and we are gonna take two
examples
and we are gonna compare them remember
there is a date here we can use it
i'm gonna say
dot date
minus b dot date if you don't know how
to sort items in javascript i recommend
you to google it it's not in complex
okay it's not correct
it should be b minus a
okay perfect
and it's here also
if we write something to john
as you can see it's here
perfect
but we didn't show them here let's open
this
i'm gonna open like that
and i'm gonna write here a condition i
will say
if message dot sender id
equals our id
it means it belongs to us
so we can show our image so i'm gonna
say current user dot photo url
if it's not
show users
of course data dot user
and i can do the same thing for our
class name here remember we can write
here owner so i'm gonna say write here
message
but also check
this message sender id sender
if it belongs as right here owner
and
it's gonna be text
and if there is an image we are going to
show it here
message dot image
and of course it should be an condition
here
if there is no image we shouldn't show
it so i will say
message
dot image
like that
as you can see it's here perfect
but there's a problem here if i write
something
it still stays here but it should scroll
to the latest message to do that we are
going to use use left hook
i will say post
rev
ref
and i'm gonna use it here
and whenever we create a new message we
are gonna screw
to do that we can use use effect
i will say dot current
scroll into view
and this animation will not be sharp
it's going to be smooth so i will say
behavior
smooth and whenever we receive any
message
let's import this
user fact
i'm here
will send a message
as you can see it's here perfect
okay perfect and that's all i think so
let's deploy our application so i'm
gonna open my terminal and i'm gonna say
npm run
build
and it's gonna create here a build
folder as you can see and it's gonna
build the necessary files as you can see
it's ready let's check and there is a
index file here
and static files which includes our css
and javascript files
so it's really easy to handle that let's
go to the hostinger panel
and here i'm gonna choose file manager
as you can see there is a default page
here
but we are gonna change it let's click
here public html and as you can see
there is a default file here
i'm gonna delete this
and let's choose those files and move
here
as you can see it took just five seconds
let's check our website i'm gonna
refresh
as you can see it's here and as you
realize our connection is secure that's
because we have an ssl certificate let's
register
i'm gonna choose an image
and it's here
let's find a user
okay perfect
and others
okay
as you can see it's here
let's send this cat
and this is our website and it's here
awesome
it works so that's all guys i hope you
liked it don't forget it's just a
tutorial i'm not providing any complete
application of course you are gonna find
some errors that because we are not
testing anything here but don't worry
just use our social media groups and ask
your questions and as always if you
learned something new today please like
the video you can support lamadev using
the link in the description below or by
joining the channel i hope i will see
you in the next tutorial goodbye
